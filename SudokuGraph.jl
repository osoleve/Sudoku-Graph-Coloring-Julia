include("SudokuNode.jl")
include("SudokuEdge.jl")

using Lazy: @>, @>>, @as
using Base.Iterators: product, flatten

mutable struct SudokuGraph
    nodes::Vector{SudokuNode}
    edges::Vector{Edge}

    size::Int

    function SudokuGraph(size::Int)
        #=
        The node coordinates are (row, column, cell),
        generated by creating the cartesian set of (row, col)
        and then assigning the cell based on a formula.
        =#

        nodes = @as x begin
            1:size^2
            product(x, x)
            SudokuNode.(x)
            set_cell!.(x, size)
            reshape(x, size^4)
        end

        edges = nodes_to_edges(nodes)

        return new(nodes, edges, size)
    end
end

function get_node(coordinates::Tuple{Int,Int}, graph::SudokuGraph)::SudokuNode
    return @>> begin
        graph.nodes
        filter(node -> node.coordinates == coordinates)
        pop!
    end
end

function Base.print(g::SudokuGraph)
    width = g.size^2
    for i = 1:width, j = 1:width
        @> begin
            get_node((i, j), g)
            get_value
            string(if j == width
                "\n"
            else
                " "
            end)
            print
        end
    end
end

function get_neighbors(node::SudokuNode, graph::SudokuGraph)::Vector{SudokuNode}
    return @>> graph.edges begin
        filter(edge -> node in edge)
        map(get_nodes)
        flatten
        collect
        filter(x -> !isequal(node, x))
    end
end

function get_saturated_values(node::SudokuNode, graph::SudokuGraph)::Vector{Int}
    return @>> begin
        get_neighbors(node, graph)
        filter(x -> x.value > 0)
        get_value.()
        unique
    end
end

function get_saturation(node::SudokuNode, graph::SudokuGraph)::Int
    return get_saturated_values(node, graph) |> length
end

function get_possible_values(node::SudokuNode, graph::SudokuGraph)::Vector{Int}
    sv = get_saturated_values(node, graph)
    return collect(filter(x -> x âˆ‰ sv, 1:graph.size^2))
end

function set_possible_values!(node::SudokuNode, graph::SudokuGraph)::SudokuNode
    node.possible_values = get_possible_values(node, graph)
    return node
end
