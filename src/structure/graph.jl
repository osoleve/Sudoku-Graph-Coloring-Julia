include("node.jl")
include("edge.jl")

using Lazy: @>, @>>, @as
using Base.Iterators: product, flatten

mutable struct SudokuGraph
    nodes::Vector{SudokuNode}
    edges::Vector{Edge}

    puzzle_size::Int

    function SudokuGraph(puzzle_size::Int)
        #=
        The node coordinates are (row, column, cell),
        generated by creating the cartesian set of (row, col)
        and then assigning the cell based on a formula.
        =#

        nodes = @as x begin
            1:puzzle_size^2
            product(x, x)
            SudokuNode.(x)
            set_cell!.(x, puzzle_size)
            reshape(x, puzzle_size^4)
        end

        edges = nodes_to_edges(nodes)

        return new(nodes, edges, puzzle_size)
    end
end

function get_node(coordinates::Tuple{Int,Int}, graph::SudokuGraph)::SudokuNode
    return @>> graph.nodes begin
        filter(node -> node.coordinates == coordinates)
        pop!
    end
end

function get_cell(graph::SudokuGraph, i::Int)::Vector{SudokuNode}
    return @>> graph.nodes begin
        filter(node -> node.cell == i)
        collect
    end
end

function get_neighbors(node::SudokuNode, graph::SudokuGraph)::Vector{SudokuNode}
    return @>> graph.edges begin
        filter(edge -> node in edge)
        map(get_nodes)
        flatten
        collect
        filter(x -> !isequal(node, x))
    end
end

function get_saturated_values(node::SudokuNode, graph::SudokuGraph)::Vector{Int}
    return @>> graph begin
        get_neighbors(node)
        filter(x -> x.value > 0)
        map(get_value)
        unique
    end
end

function get_saturation(node::SudokuNode, graph::SudokuGraph)::Int
    return get_saturated_values(node, graph) |> length
end

function get_possible_values(node::SudokuNode, graph::SudokuGraph)::Vector{Int}
    sv = get_saturated_values(node, graph)
    return collect(filter(x -> x âˆ‰ sv, 1:graph.puzzle_size^2))
end

function set_possible_values!(node::SudokuNode, graph::SudokuGraph)::SudokuNode
    node.possible_values = get_possible_values(node, graph)
    return node
end

function unset_value!(node::SudokuNode, graph::SudokuGraph)::SudokuNode
    node.value = 0
    set_possible_values!(node, graph)
    return node
end

function get_blank_nodes(graph::SudokuGraph)::Vector{SudokuNode}
    return @>> begin
        graph.nodes
        filter(x -> get_value(x) == 0)
        collect
    end
end

function get_nonblank_nodes(graph::SudokuGraph)::Vector{SudokuNode}
    return @>> begin
        graph.nodes
        filter(x -> get_value(x) != 0)
        collect
    end
end

function confirm_solution_validity(graph::SudokuGraph)::Bool
    for edge in graph.edges
        nodes = get_nodes(edge)
        if get_value(nodes[1]) == get_value(nodes[2])
            return false
        end
    end
    return true
end
